
一、对象
  1、 delete <object><attribute>
  2、 <object>.hasOwnProperty(<attribute>) 判断一个属性是否是对象自身拥有的，而不是继承得到的，返回boolean
  
  
二、条件判断
  1、null、undefined、0、NaN和空字符串'' 视为false，其他视为true
  
三、ES6规范

  1、引入新的数据类型 
     var m = new Map();
     var s = new Set();
  2、iterable类型，Array、Map和Set都属于iterable类型，下标遍历
      for ... of循环
     iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数
     demo:
     var a = ['3','5','7'];
     a.forEach(function (element, index, array) {
        // element: 指向当前元素的值
        // index: 指向当前索引
        // array: 指向Array对象本身
        console.log(element + ', index = ' + index);
      });
   3、关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。arguments类似Array但它不是一个Array
   
   4、rest参数只能写在最后，前面用...标识
       如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组
   5、cont\let 块级作用域
   
   6、解构赋值，可以同时对一组变量进行赋值
   //高阶函数
   //begin
   7、map/reduce
      （1）、map()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果
          function pow(x) {
              return x * x;
          }
          var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
          var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]
          console.log(results);
      （2）、Array的所有数字转为字符串
          var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];
          arr.map(String); // ['1', '2', '3', '4', '5', '6', '7', '8', '9']
      （3）、Array的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算
       对一个Array求和，就可以用reduce实现：
          var arr = [1, 3, 5, 7, 9];
          arr.reduce(function (x, y) {
              return x + y;
          }); // 25
     8、Array的filter()也接收一个函数,filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素
      在一个Array中，删掉偶数，只保留奇数，可以这么写：
          var arr = [1, 2, 4, 5, 6, 9, 10, 15];
          var r = arr.filter(function (x) {
              return x % 2 !== 0;
          });
          r; // [1, 5, 9, 15]
     //end
