#规范
存储选型
  1、Sharding分片特性避免系统在数据增长的过程中遇到性能 瓶颈。
  2、非事务并且关联性集合不强的都可以使用(MongoDB4.0+支持跨Collection事务，MongoDB4.2+支持跨Shard事务)
  3、数据模型不固定，存储格式灵活场景
一、库设计规范
  1、【强制】数据库命名规范：db_xxxx
  2、【强制】库名全部小写，禁止使用任何_以外的特殊字符，禁止使用数字打头的库名，如：123_abc；
  3、【强制】数据库名称最多为 64 个字符。
  4、【强制】在创建新的库前应尽量评估该库的体积、QPS等，提前与DBA讨论是应该新建一个库还是专门为该库创建一个新的集群;
二、集合设计规范
  1、【强制】集合名全部小写，禁止使用任何_以外的特殊字符，禁止使用数字打头的集合名，如：123_abc，禁止system打头; system是系统集合前缀；
  2、【强制】集合名称最多为64字符；
  3、【建议】一个库中写入较大的集合会影响其它集合的读写性能，如果业务比较繁忙的集合在一个DB中，建议最多80个集合，同时也要考虑磁盘I/O的性能；
  4、【建议】如果评估单集合数据量较大，可以将一个大表拆分为多个小表，然后将每一个小表存放在独立的库中或者sharding分表；
  5、【建议】MongoDB的集合拥有"自动清理过期数据"的功能，只需在该集合中文档的时间字段增加一个TTL索引即可实现该功能，但需要注意的是该字段的类型则必须是mongoDate()，一定要结合实际业务设计是否需要；
  6、【建议】设计轮询集合---集合是否设计为Capped限制集，一定要结合实际业务设计是否需要；
三、文档设计规范
  1、【建议】禁止使用_id，如：向_id中写入自定义内容；
说明：MongoDB的表与InnoDB相似,都是索引组织表,数据内容跟在主键后,而_id是MongoDB中的默认主键,一旦_id的值为非自增,当数据量达到一定程度之后,每一次写入都可能导致主键的二叉树大幅度调整,这将是一个代价极大的写入, 所以写入就会随着数据量的增大而下降,所以一定不要在_id中写入自定义的内容。
  2、【建议】尽量不要让数组字段成为查询条件;
  3、【建议】如果字段较大，应尽量压缩存放;
不要存放太长的字符串，如果这个字段为查询条件，那么确保该字段的值不超过1KB；MongoDB的索引仅支持1K以内的字段，如果你存入的数据长度超过1K，那么它将无法被索引
  4、【建议】如果评估单集合数据量较大，可以将一个大表拆分为多个小表，然后将每一个小表存放在独立的库中或者sharding分表；
四、索引设计规范
1、【强制】MongoDB 的组合索引使用策略与 MySQL 一致，遵循"最左原则"；
2、【强制】索引名称长度不要超过 128 字符
3、【强制】应尽量综合评估查询场景,通过评估尽可能的将单列索引并入组合索引以降低所以数量，结合1，2点;
4、【建议】优先使用覆盖索引
5、【建议】创建组合索引的时候，应评估索引中包含的字段，尽量将数据基数大(唯一值多的数据)的字段放在组合索引的前面；
6、【建议】MongoDB 支持 TTL 索引，该索引能够按你的需要自动删除XXX秒之前的数据并会尽量选择在业务低峰期执行删除操作；看业务是否需要这一类型索引；
7、【建议】在数据量较大的时候，MongoDB 索引的创建是一个缓慢的过程，所以应当在上线前或数据量变得很大前尽量评估，按需创建会用到的索引；
8、【建议】如果你存放的数据是地理位置信息，比如：经纬度数据。那么可以在该字段上添加 MongoDB 支持的地理索引：2d 及 2dsphere，但他们是不同的，混用会导致结果不准确；
  
  
  
  
  
