推送远程仓库用户名/密码   mianhuatangonly@163.com 

/* git 入门 创建版本库 */
1、 ls -ah 可以查看创建git仓库时隐藏的.git文件
2、 git add <file>    可以反复多次使用，多次提交
3、 git commit -m(后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录)
4、 git status     可以让我们时刻掌握仓库当前的状态，文件被修改
5、 git diff          查看difference，显示的格式正是Unix通用的diff格式
6、 git log           显示从最近到最远的提交日志；加上--pretty=oneline参数，可以减少输出信息；加上--graph  可以看到分支合并图；
                      加上--abbrev-commit，输出结果里就会使用简短且唯一的值；它默认使用七个字符来表示，不过必要时为了避免 SHA-1 的歧义，会增加字                       符数：
7、 git reset  --hard  回退版本，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100
    git reset --hard   <commit_id，版本号可以是前几位数> 
8、 git reflog         记录你的每一次命令
9、 git checkout -- <file>  可以丢弃工作区的修改，全部撤销
   一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
   一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
   总之，就是让这个文件回到最近一次git commit或git add时的状态。
10、 git reset HEAD <file> 可以把暂存区的修改撤销掉（unstage），重新放回工作区；然后再用git checkout -- <file>就把工作区的修改丢弃了
11、 git rm 删除一个文件
12、 git branch <分支>              创建分支
13、 git checkout -b <分支>  创建并切换分支相当于 
                                                 $ git branch <分支>
                                                 $ git checkout <分支>
14、 git branch                     查看当前分支
15、 git checkout  <分支>           切换分支
16、 git merge     <分支>           合并指定分支到当前分支
             (1)、合并分支时，加上--no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过                   合并。
            （2）、--no-ff 后加 -m   表示本次合并要创建一个新的commit
            
17、 git branch -d <分支>           删除分支

18、Bug分支 （git stash）（git stash list）   （git stash apply git stash drop）/（git stash pop）
   （1）、 git stash   储存当前的工作现场，等以后恢复现场后继续工作
   （2）、 git stash list  查看存储的stash
   （3）、 两种方式恢复stash
         3.1、git stash apply 恢复stash ，但stash内容并不删除，你需要用git stash drop来删除
         3.2、git stash pop， 恢复stash的同时把stash内容也删了
19、git branch -D <分支>  丢弃一个没有被合并过的分支，强行删除


Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快

一、/* git 本地仓库与远程仓库关联 */
     1、 git remote add origin(远程仓库名)  <远程仓库地址>
     2、 git push -u origin master         由于刚建立远程库是空的，我们第一次推送master分支时，加上了-u参数;本地库的内容推送到远程


二、/* git clone <远程仓库> */
     1、 git clone <ssh> 第一次可能出现(出现这个问题是因为没有在github账号添加SSH key)
       （1）、 The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
              RSA key fingerprint is xx.xx.xx.xx.xx.
              Are you sure you want to continue connecting (yes/no)?
        (2)、 yes之后，出现  fatal: Could not read from remote  repository.Please make sure you
                         have the correct access rights and the repository exists.
        解决方法：
         （1）、执行 ssh-keygen -t rsa -C "username" (注：username为你git上的用户名)
         （2）、如果执行成功，会有生成key文件的目录，id_rsa.pub文件中的数据就是我们需要的SSH KEYS
          (3)、 把id_rsa.pub文件中的内容复制到github账户设置里边的SSH keys，再执行git clone 就ok了



三、/* git教程、github入门到上传本地项目 */
    1、https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000
    2、http://www.cnblogs.com/specter45/p/github.html
    (如果最后提交失败，先执行git pull --rebase origin master 合并，再执行push命令）
